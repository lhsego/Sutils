% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/findSS.R
\name{findSS}
\alias{findSS}
\title{Find the minimum sample size for a given set of parameters}
\usage{
findSS(conf, rho, N, prior.prob = NULL, beta = NULL, pct.clean = NULL,
  ub = NULL, alphaSeq = seq(0, 1, by = 0.1), nJobs = 1, pJobs = 1,
  minmax = TRUE, epsilon = 0.01, ...)
}
\arguments{
\item{conf}{the target confidence that one wishes to achieve}

\item{rho}{a vector of relative weights of finding an unacceptable item relative to
stratum 1. Note that rho[1] = 1 always.}

\item{N}{the vector of total grid cells for each stratum}

\item{prior.prob}{A priori expected proportion of grid cells that are acceptable in the highest-risk stratum.}

\item{beta}{The value of the beta parameter of the Beta prior distribution for the highest-risk stratum, equal to
\code{prior.prob} / (1 - \code{prior.prob}).}

\item{pct.clean}{the percentage of the total sampling area that is desired to be free
of contamination}

\item{ub}{The maximum number of 'allowable' unacceptable items}

\item{alphaSeq}{a numeric vector of arbitrary length with elements in c(0,1). This function
chooses a locally optimal allocation according to the following function:
alpha * (N/sum(N)) + (1 - alpha) * rho. That is to say, an alpha close to zero favors
allocating samples by risk (rho) and an alpha close to one favors allocating samples by
relative proportion.}

\item{nJobs}{The number of parallel jobs to spawn at the alpha level using
\code{\link[parallel:parLapply]{parallel::parLapply}}.}

\item{pJobs}{The number parallel jobs to spawn at the confidence calculation level. The calls to
\code{\link[Smisc:pkbinom]{Smisc::pkbinom}} are paralellized using
\code{\link[parallel:parLapply]{parallel::parLapply}}}

\item{minmax}{If \code{TRUE}, identify the minimal sample size that maxmizes alpha}

\item{epsilon}{the tolerance parameter to pass to \code{\link{minmax}}. Default value is
epsilon = 0.01. A numeric object. Ignored if \code{minimax = FALSE}.}

\item{\dots}{Optional arguments to \code{\link{confRaw}}}
}
\value{
A data frame with the following columns:
\item{alpha}{The value of alpha}
\item{n1}{The sample size of the first strata}
\item{n2}{The sample size of the second strata, and so on}
\item{n.sum}{The total sample size}
\item{achieved.conf}{The actual confidence achieved with those samples}
If \code{minmax = TRUE}, only a single row of the data frame is returned--the one that
minimizes the sample size with the largest alpha.  For \code{mimmax = FALSE}, the results
from all the alpha values in  \code{alphaVec} are returned.
}
\description{
Find the minimum sample size for a given set of parameters
}
\details{
Either \code{prior.prob} or \code{beta} must be specified.  But not both.  Same for
\code{pct.clean} and \code{ub}.  If parallelization is desired, only one of \code{nJobs} or
\code{pJobs} may be greater than 1.
}
\examples{

# N must be an integer
N <- c(1000, 1000, 1000)

rho <- c(1, 0.85, 0.75)

prior.prob <- 0.99

pct.clean <- 0.99

# I want to be 95\% confident that no more than ub items were left undiscovered
# in the unsampled area
conf <- 0.95

# I want to calculate a sequence of sample sizes with respect to alpha. The
# smallest total sample size of this set is the returned value.

alpha <- seq(0, 1, length = 10)

minSamps <- findSS(conf, rho, N, prior.prob = prior.prob, pct.clean = pct.clean, alphaSeq = alpha)
minSamps

}
\author{
Alex Venzin
}

